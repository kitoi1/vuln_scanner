#!/bin/bash

# Enhanced Nmap Vulnerability Scanner with Security Safeguards
# Version: 3.0
# Author: Kasau
# License: MIT

## Configuration Variables
MAX_SCAN_TIME=3600  # Maximum allowed scan time in seconds (1 hour)
RATE_LIMIT=100      # Packets per second limit
EXCLUDE_PORTS="22"  # Ports to exclude from scanning (SSH by default)

# Check if Nmap is installed
if ! command -v nmap &> /dev/null; then
    echo "Error: Nmap is not installed. Please install Nmap first."
    exit 1
fi

# Check if running as root (required for some scans)
if [ "$(id -u)" -ne 0 ]; then
    echo "Warning: Running without root privileges. Some scans may be limited."
    read -p "Continue without root? (yes/no): " ROOT_CONFIRM
    if [[ "$ROOT_CONFIRM" != "yes" ]]; then
        echo "Scan aborted."
        exit 1
    fi
    PRIVILEGE_FLAG=""
else
    PRIVILEGE_FLAG="-sS"
fi

# Validate target input
if [ -z "$1" ]; then
    echo "Usage: $0 <target|target_file> [output_file]"
    echo "Example: $0 192.168.1.1 scan_results.log"
    echo "Example: $0 targets.txt scan_results.log"
    exit 1
fi

TARGET=$1
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOGFILE=${2:-"nmap_vuln_scan_${TIMESTAMP}.log"}

# Security validation functions
validate_ip() {
    local ip=$1
    local stat=1
    
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        IFS='.' read -ra ip_parts <<< "$ip"
        [[ ${ip_parts[0]} -le 255 && ${ip_parts[1]} -le 255 \
           && ${ip_parts[2]} -le 255 && ${ip_parts[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

is_private_ip() {
    local ip=$1
    IFS='.' read -ra ADDR <<< "$ip"
    
    # Check for private IP ranges:
    # 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16
    if (( ADDR[0] == 10 )) || \
       (( ADDR[0] == 172 && ADDR[1] >= 16 && ADDR[1] <= 31 )) || \
       (( ADDR[0] == 192 && ADDR[1] == 168 )); then
        return 0
    else
        return 1
    fi
}

# Process multiple targets if input is a file
if [ -f "$TARGET" ]; then
    TARGETS=$(cat "$TARGET")
else
    TARGETS=$TARGET
fi

# Create scan directory with restricted permissions
SCAN_DIR="$(dirname "$LOGFILE")"
mkdir -p "$SCAN_DIR"
chmod 700 "$SCAN_DIR"

# Interactive menu for scan options
echo "Select scan type:"
echo "1. Quick Scan"
echo "2. Full Scan"
echo "3. Custom Scan"
read -p "Enter your choice: " SCAN_TYPE

case $SCAN_TYPE in
    1) SCAN_FLAGS="-F";;
    2) SCAN_FLAGS="-sV --script vuln";;
    3) 
        read -p "Enter custom Nmap flags: " SCAN_FLAGS
        ;;
    *) 
        echo "Invalid choice. Exiting."
        exit 1
        ;;
esac

# Start the scan for each target
for TARGET in $TARGETS; do
    echo "[$(date)] Starting enhanced vulnerability scan on $TARGET"
    echo "Scan started at $(date)" >> "$LOGFILE"
    echo "Target: $TARGET" >> "$LOGFILE"
    echo "Scanner version: 3.0" >> "$LOGFILE"

    # Run Nmap with enhanced security flags and time limit
    echo "Running Nmap with selected options (this may take some time)..."
    timeout $MAX_SCAN_TIME nmap $PRIVILEGE_FLAG -Pn --max-rate $RATE_LIMIT \
        --exclude-ports $EXCLUDE_PORTS $SCAN_FLAGS \
        -oN "$LOGFILE" "$TARGET"

    SCAN_EXIT_CODE=$?

    # Check scan results
    if [ $SCAN_EXIT_CODE -eq 124 ]; then
        echo "WARNING: Scan was terminated after reaching maximum time limit ($MAX_SCAN_TIME seconds)." | tee -a "$LOGFILE"
    elif [ $SCAN_EXIT_CODE -ne 0 ]; then
        echo "ERROR: Scan failed with exit code $SCAN_EXIT_CODE" | tee -a "$LOGFILE"
    fi

    # Generate summary
    VULN_COUNT=$(grep -c "VULNERABLE:" "$LOGFILE")
    echo "Scan completed at $(date)" | tee -a "$LOGFILE"
    echo "Vulnerabilities found: $VULN_COUNT" | tee -a "$LOGFILE"
    echo "Detailed results saved to: $LOGFILE"

    # Send email notification if vulnerabilities are found
    if [ "$VULN_COUNT" -gt 0 ]; then
        echo "WARNING: $VULN_COUNT potential vulnerabilities detected!"
        echo "Sending email notification..."

        # Replace with actual email-sending command
        # Example: mail -s "Vulnerability Scan Report for $TARGET" "$CONTACT_EMAIL" < "$LOGFILE"
    fi
done

# Post-scan security cleanup
chmod 600 "$LOGFILE"

exit 0
